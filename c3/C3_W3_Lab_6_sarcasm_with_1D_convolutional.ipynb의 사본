{"cells":[{"cell_type":"markdown","metadata":{"id":"pexjyZzdljlm"},"source":["<a href=\"https://colab.research.google.com/github/https-deeplearning-ai/tensorflow-1-public/blob/master/C3/W3/ungraded_labs/C3_W3_Lab_6_sarcasm_with_1D_convolutional.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"]},{"cell_type":"markdown","metadata":{"id":"YEdilk144fzb"},"source":["# Ungraded Lab: Training a Sarcasm Detection Model using a Convolution Layer\n","\n","You will be doing the same steps here as the previous lab but will be using a convolution layer instead. As usual, try tweaking the parameters and observe how it affects the results. \n"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"nchbpdgWljlo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662481255946,"user_tz":-540,"elapsed":66384,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}},"outputId":"fe33f961-500d-469d-a70e-90a08ade0be6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following package was automatically installed and is no longer required:\n","  libnvidia-common-460\n","Use 'apt autoremove' to remove it.\n","The following packages will be REMOVED:\n","  libcudnn8-dev\n","The following held packages will be changed:\n","  libcudnn8\n","The following packages will be upgraded:\n","  libcudnn8\n","1 upgraded, 0 newly installed, 1 to remove and 18 not upgraded.\n","Need to get 420 MB of archives.\n","After this operation, 3,369 MB disk space will be freed.\n","Get:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  libcudnn8 8.4.1.50-1+cuda11.6 [420 MB]\n","Fetched 420 MB in 14s (29.4 MB/s)\n","(Reading database ... 155685 files and directories currently installed.)\n","Removing libcudnn8-dev (8.0.5.39-1+cuda11.1) ...\n","(Reading database ... 155663 files and directories currently installed.)\n","Preparing to unpack .../libcudnn8_8.4.1.50-1+cuda11.6_amd64.deb ...\n","Unpacking libcudnn8 (8.4.1.50-1+cuda11.6) over (8.0.5.39-1+cuda11.1) ...\n","Setting up libcudnn8 (8.4.1.50-1+cuda11.6) ...\n"]}],"source":["# Install this package to use Colab's GPU for training\n","!apt install --allow-change-held-packages libcudnn8=8.4.1.50-1+cuda11.6"]},{"cell_type":"markdown","metadata":{"id":"pmokcpHc5u1R"},"source":["## Download the Dataset"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"dxezdGoV29Yz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662481256382,"user_tz":-540,"elapsed":443,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}},"outputId":"3d00ae15-ab8c-4421-aaf6-05b0cf382c96"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-09-06 16:20:55--  https://storage.googleapis.com/tensorflow-1-public/course3/sarcasm.json\n","Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.129.128, 209.85.234.128, 142.250.152.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.129.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 5643545 (5.4M) [application/json]\n","Saving to: ‘sarcasm.json’\n","\n","\rsarcasm.json          0%[                    ]       0  --.-KB/s               \rsarcasm.json        100%[===================>]   5.38M  --.-KB/s    in 0.03s   \n","\n","2022-09-06 16:20:55 (180 MB/s) - ‘sarcasm.json’ saved [5643545/5643545]\n","\n"]}],"source":["# Download the dataset\n","!wget https://storage.googleapis.com/tensorflow-1-public/course3/sarcasm.json"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"BTcGA2Po2_nN","executionInfo":{"status":"ok","timestamp":1662481256382,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}}},"outputs":[],"source":["import json\n","\n","# Load the JSON file\n","with open(\"./sarcasm.json\", 'r') as f:\n","    datastore = json.load(f)\n","\n","# Initialize the lists\n","sentences = []\n","labels = []\n","\n","# Collect sentences and labels into the lists\n","for item in datastore:\n","    sentences.append(item['headline'])\n","    labels.append(item['is_sarcastic'])"]},{"cell_type":"markdown","metadata":{"id":"F2zXSds45s2P"},"source":["## Split the Dataset"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"baDwTn9S3ENB","executionInfo":{"status":"ok","timestamp":1662481256383,"user_tz":-540,"elapsed":4,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}}},"outputs":[],"source":["training_size = 20000\n","\n","# Split the sentences\n","training_sentences = sentences[0:training_size]\n","testing_sentences = sentences[training_size:]\n","\n","# Split the labels\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]"]},{"cell_type":"markdown","metadata":{"id":"NdpLY-or5pTP"},"source":["## Data preprocessing"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"RHjZR4oi3LOq","executionInfo":{"status":"ok","timestamp":1662481260130,"user_tz":-540,"elapsed":3750,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}}},"outputs":[],"source":["import numpy as np\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","vocab_size = 10000\n","max_length = 120\n","trunc_type='post'\n","padding_type='post'\n","oov_tok = \"<OOV>\"\n","\n","# Initialize the Tokenizer class\n","tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\n","\n","# Generate the word index dictionary\n","tokenizer.fit_on_texts(training_sentences)\n","word_index = tokenizer.word_index\n","\n","# Generate and pad the training sequences\n","training_sequences = tokenizer.texts_to_sequences(training_sentences)\n","training_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n","\n","# Generate and pad the testing sequences\n","testing_sequences = tokenizer.texts_to_sequences(testing_sentences)\n","testing_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n","\n","# Convert the labels lists into numpy arrays\n","training_labels = np.array(training_labels)\n","testing_labels = np.array(testing_labels)"]},{"cell_type":"markdown","metadata":{"id":"HQBjPv_A5m1x"},"source":["## Build and Compile the Model"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"jGwXGIXvFhXW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662481260132,"user_tz":-540,"elapsed":10,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}},"outputId":"4f3fd3e3-a5e7-413e-9c1c-10cc5f65c58c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 120, 16)           160000    \n","                                                                 \n"," conv1d (Conv1D)             (None, 116, 128)          10368     \n","                                                                 \n"," global_max_pooling1d (Globa  (None, 128)              0         \n"," lMaxPooling1D)                                                  \n","                                                                 \n"," dense (Dense)               (None, 6)                 774       \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 7         \n","                                                                 \n","=================================================================\n","Total params: 171,149\n","Trainable params: 171,149\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["import tensorflow as tf\n","\n","# Parameters\n","embedding_dim = 16\n","filters = 128\n","kernel_size = 5\n","dense_dim = 6\n","\n","# Model Definition with Conv1D\n","model_conv = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.Conv1D(filters, kernel_size, activation='relu'),\n","    tf.keras.layers.GlobalMaxPooling1D(),\n","    tf.keras.layers.Dense(dense_dim, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","# Set the training parameters\n","model_conv.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","\n","# Print the model summary\n","model_conv.summary()"]},{"cell_type":"markdown","metadata":{"id":"PcXC5QG45kM7"},"source":["## Train the Model"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"oB6C55FO3z3q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662481347713,"user_tz":-540,"elapsed":87585,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}},"outputId":"4d7165a7-8699-4a6c-cc07-c560010b88f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","625/625 [==============================] - 10s 14ms/step - loss: 0.4747 - accuracy: 0.7401 - val_loss: 0.3649 - val_accuracy: 0.8392\n","Epoch 2/10\n","625/625 [==============================] - 9s 14ms/step - loss: 0.2470 - accuracy: 0.9004 - val_loss: 0.3691 - val_accuracy: 0.8425\n","Epoch 3/10\n","625/625 [==============================] - 9s 15ms/step - loss: 0.1443 - accuracy: 0.9478 - val_loss: 0.4305 - val_accuracy: 0.8414\n","Epoch 4/10\n","625/625 [==============================] - 8s 13ms/step - loss: 0.0737 - accuracy: 0.9766 - val_loss: 0.5261 - val_accuracy: 0.8363\n","Epoch 5/10\n","625/625 [==============================] - 8s 13ms/step - loss: 0.0338 - accuracy: 0.9904 - val_loss: 0.6451 - val_accuracy: 0.8299\n","Epoch 6/10\n","625/625 [==============================] - 9s 14ms/step - loss: 0.0152 - accuracy: 0.9961 - val_loss: 0.7400 - val_accuracy: 0.8334\n","Epoch 7/10\n","625/625 [==============================] - 9s 14ms/step - loss: 0.0068 - accuracy: 0.9984 - val_loss: 0.8637 - val_accuracy: 0.8298\n","Epoch 8/10\n","625/625 [==============================] - 9s 14ms/step - loss: 0.0034 - accuracy: 0.9993 - val_loss: 0.9350 - val_accuracy: 0.8292\n","Epoch 9/10\n","625/625 [==============================] - 9s 14ms/step - loss: 0.0021 - accuracy: 0.9995 - val_loss: 1.0252 - val_accuracy: 0.8331\n","Epoch 10/10\n","625/625 [==============================] - 9s 14ms/step - loss: 0.0015 - accuracy: 0.9996 - val_loss: 1.0884 - val_accuracy: 0.8269\n"]}],"source":["NUM_EPOCHS = 10\n","\n","# Train the model\n","history_conv = model_conv.fit(training_padded, training_labels, epochs=NUM_EPOCHS, validation_data=(testing_padded, testing_labels))"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"g9DC6dmLF8DC","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"ok","timestamp":1662481348253,"user_tz":-540,"elapsed":560,"user":{"displayName":"‍조성우[ 학부재학 / 산업경영공학부 ]","userId":"07929875586727967845"}},"outputId":"c388a21a-3efb-400b-e01e-5f211ab120b0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","\n","# Plot Utility\n","def plot_graphs(history, string):\n","  plt.plot(history.history[string])\n","  plt.plot(history.history['val_'+string])\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(string)\n","  plt.legend([string, 'val_'+string])\n","  plt.show()\n","\n","# Plot the accuracy and loss history\n","plot_graphs(history_conv, 'accuracy')\n","plot_graphs(history_conv, 'loss')"]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/https-deeplearning-ai/tensorflow-1-public/blob/master/C3/W3/ungraded_labs/C3_W3_Lab_6_sarcasm_with_1D_convolutional.ipynb","timestamp":1662480961839}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}